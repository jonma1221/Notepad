//
// Name: Ma, Jonathan
// Project: #4
// Due: 12/4/15
// Course: CS-245-01-f15
//
// Description:
// A text editor that inplements some of Window's notepad features.
//

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.text.*;
import java.util.Date;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jonathan
 */
public class frame extends javax.swing.JFrame {
    int findIdx = 0;
    JTextField jtfFind;
    boolean fileExist;
    File file;
    Font font = new Font("Courier",Font.PLAIN,12);
    /**
     * Creates new form frame
     */
    public frame() {
        initComponents();
        setTitle("Untitled");
        setIconImage(new ImageIcon("JNotepad.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        cutPopUp = new javax.swing.JMenuItem();
        copyPopup = new javax.swing.JMenuItem();
        pastePopup = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        PageSetup = new javax.swing.JMenuItem();
        Print = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Undo = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        Delete = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        Find = new javax.swing.JMenuItem();
        FindNext = new javax.swing.JMenuItem();
        Replace = new javax.swing.JMenuItem();
        GoTo = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        SelectAll = new javax.swing.JMenuItem();
        TimeDate = new javax.swing.JMenuItem();
        Format = new javax.swing.JMenu();
        WordWrap = new javax.swing.JCheckBoxMenuItem();
        FontItem = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        Status = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        viewHelp = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        About = new javax.swing.JMenuItem();

        cutPopUp.setText("Cut");
        cutPopUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutPopUpActionPerformed(evt);
            }
        });
        jPopupMenu1.add(cutPopUp);

        copyPopup.setText("Copy");
        jPopupMenu1.add(copyPopup);

        pastePopup.setText("Paste");
        pastePopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastePopupActionPerformed(evt);
            }
        });
        jPopupMenu1.add(pastePopup);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JNotepad");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextArea1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextArea1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        File.setMnemonic(KeyEvent.VK_F);
        File.setText("File");

        New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New.setMnemonic('n');
        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        File.add(New);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open...");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        SaveAs.setText("Save As...");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        File.add(SaveAs);
        File.add(jSeparator1);

        PageSetup.setMnemonic('u');
        PageSetup.setText("Page Setup...");
        File.add(PageSetup);

        Print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        Print.setText("Print...");
        File.add(Print);
        File.add(jSeparator2);

        Exit.setMnemonic('x');
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Edit.setMnemonic('e');
        Edit.setText("Edit");

        Undo.setText("Undo");
        Edit.add(Undo);
        Edit.add(jSeparator4);

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        Edit.add(Cut);

        Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        Edit.add(Copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Edit.add(Paste);

        Delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        Edit.add(Delete);
        Edit.add(jSeparator5);

        Find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        Find.setText("Find...");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });
        Edit.add(Find);

        FindNext.setText("Find Next");
        FindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindNextActionPerformed(evt);
            }
        });
        Edit.add(FindNext);

        Replace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        Replace.setText("Replace...");
        Edit.add(Replace);

        GoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        GoTo.setText("Go To...");
        Edit.add(GoTo);
        Edit.add(jSeparator6);

        SelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        SelectAll.setText("Select All");
        SelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAllActionPerformed(evt);
            }
        });
        Edit.add(SelectAll);

        TimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        TimeDate.setText("Time/Date");
        TimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeDateActionPerformed(evt);
            }
        });
        Edit.add(TimeDate);

        jMenuBar1.add(Edit);

        Format.setMnemonic('w');
        Format.setText("Format");

        WordWrap.setText("Word Wrap");
        WordWrap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                WordWrapItemStateChanged(evt);
            }
        });
        Format.add(WordWrap);

        FontItem.setMnemonic('f');
        FontItem.setText("Font");
        FontItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FontItemActionPerformed(evt);
            }
        });
        Format.add(FontItem);

        jMenuBar1.add(Format);

        View.setMnemonic('v');
        View.setText("View");

        Status.setMnemonic('s');
        Status.setText("Status Bar");
        View.add(Status);

        jMenuBar1.add(View);

        Help.setMnemonic('h');
        Help.setText("Help");

        viewHelp.setMnemonic('h');
        viewHelp.setText("View Help");
        Help.add(viewHelp);
        Help.add(jSeparator3);

        About.setText("About JNotepad");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        System.exit(0);
    }                                    

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {                                    
        jTextArea1.setText("");
        fileExist = false;
        setTitle("Untitled");
    }                                   

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Open", "txt", "java");
        jfc.setFileFilter(filter);
        int result = jfc.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            try{
                file = jfc.getSelectedFile();
                FileReader fr = new FileReader(file);
                jTextArea1.read(fr, null);
                fileExist = true;
                setTitle(file.getName());
                fr.close();
            }
            catch(IOException e){
                System.out.println("Error opening file");
            }
        }
    }                                    

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {                                    
        jTextArea1.cut();
    }                                   

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {                                      
        jTextArea1.paste();
    }                                     

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {                                     
        jTextArea1.copy();
    }                                    

    private void SelectAllActionPerformed(java.awt.event.ActionEvent evt) {                                          
        jTextArea1.selectAll();
    }                                         

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {                                       
        jTextArea1.replaceSelection("");
    }                                      

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {                                      
        JDialog jdg = new JDialog(this,"About JNotepad",true);
        jdg.setLocationRelativeTo(this);
        jdg.setLayout(new FlowLayout());
        jdg.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jdg.setSize(200,100);
        jdg.add(new JLabel("(c) Jonathan Ma"));
        jdg.setVisible(true);
    }                                     

    private void TimeDateActionPerformed(java.awt.event.ActionEvent evt) {                                         
        DateFormat df = new SimpleDateFormat("h:mm a MM/dd/yy");
        Date dateobj = new Date();
        jTextArea1.setText(df.format(dateobj));
    }                                        

    private void cutPopUpActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jTextArea1.cut();
    }                                        

    private void pastePopupActionPerformed(java.awt.event.ActionEvent evt) {                                           
        jTextArea1.paste();
    }                                          

    private void jTextArea1MousePressed(java.awt.event.MouseEvent evt) {                                        
        if(evt.isPopupTrigger())
            jPopupMenu1.show(evt.getComponent(),evt.getX(),evt.getY());
    }                                       

    private void formMousePressed(java.awt.event.MouseEvent evt) {                                  
        if(evt.isPopupTrigger())
            jPopupMenu1.show(evt.getComponent(),evt.getX(),evt.getY());

    }                                 

    private void formMouseReleased(java.awt.event.MouseEvent evt) {                                   
        if(evt.isPopupTrigger()){
            jPopupMenu1.show(evt.getComponent(),evt.getX(),evt.getY());
        }
    }                                  

    private void jTextArea1MouseReleased(java.awt.event.MouseEvent evt) {                                         
        if(evt.isPopupTrigger())
            jPopupMenu1.show(evt.getComponent(),evt.getX(),evt.getY());
    }                                        

    private void FindActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JDialog jdg = new JDialog(this,"Find");
        jdg.setSize(200,200);
        jdg.setLocationRelativeTo(this);
        jdg.setLayout(new FlowLayout());
        jdg.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jdg.add(new JLabel("Find What: "));
        jtfFind = new JTextField(15);
        jdg.add(jtfFind);
        JButton findText = new JButton("Find Next");
        jdg.add(findText);
        findText.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae){
                //findIdx = 0;
                find(findIdx);
            }
        });
        jdg.setVisible(true);
    }                                    

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {                                     
        JFileChooser jfc = new JFileChooser();
       
        FileWriter fw;
        if(!fileExist){
             int result = jfc.showSaveDialog(null);
           if(result == JFileChooser.APPROVE_OPTION){
            try {
                file = jfc.getSelectedFile();
                fw = new FileWriter(file);
                fw.write(jTextArea1.getText());
                fileExist = true;
                setTitle(jfc.getDialogTitle());
                fw.close();
            } catch (IOException ex) {
                return; 
            }
          } 
        }
        else {
            try {
                fw = new FileWriter(file);
                fw.write(jTextArea1.getText());
                fw.close();
            } catch (IOException ex) {
                return; 
            }
        }
        
    }                                    

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {                                       
        JFileChooser jfc = new JFileChooser();
        int result = jfc.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            try(FileWriter fw = new FileWriter(jfc.getSelectedFile())) {
                fw.write(jTextArea1.getText());
                fw.close();
            } catch (IOException ex) {
                return; 
            }
        }
    }                                      

    private void FontItemActionPerformed(java.awt.event.ActionEvent evt) {                                         
        JFontChooser fontChooser = new JFontChooser(this,true);
        
        fontChooser.setDefault(font);
        if(fontChooser.showDialog())
        {
           Font font = fontChooser.getFonts(); 
           jTextArea1.setFont(font);
        }
    }                                        

    private void FindNextActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if(jtfFind == null){
            JDialog jdg = new JDialog(this,"Find");
        jdg.setSize(200,200);
        jdg.setLocationRelativeTo(this);
        jdg.setLayout(new FlowLayout());
        jdg.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jdg.add(new JLabel("Find What: "));
        jtfFind = new JTextField(15);
        jdg.add(jtfFind);
        JButton findText = new JButton("Find Next");
        jdg.add(findText);
        findText.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent ae){
                find(findIdx);
            }
        });
        jdg.setVisible(true);
        }
        else find(findIdx);
    }                                        

    private void WordWrapItemStateChanged(java.awt.event.ItemEvent evt) {                                          
        if(evt.getStateChange() == ItemEvent.SELECTED){
           jTextArea1.setLineWrap(true);
        }
        else{
           jTextArea1.setLineWrap(false);
        }
    }                                         
    private void find(int start){
        String str = jTextArea1.getText();
        String findStr = jtfFind.getText();
        int x = findStr.length();
        int idx = str.indexOf(findStr, start);
        if(idx > -1){
            jTextArea1.setCaretPosition(idx);
            jTextArea1.select(idx, idx + findStr.length());
            findIdx = idx + 1;
            System.out.println(findIdx);
        }
        jTextArea1.requestFocusInWindow();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }
    public void setVisible(){
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Find;
    private javax.swing.JMenuItem FindNext;
    private javax.swing.JMenuItem FontItem;
    private javax.swing.JMenu Format;
    private javax.swing.JMenuItem GoTo;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem PageSetup;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Print;
    private javax.swing.JMenuItem Replace;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JMenuItem SelectAll;
    private javax.swing.JMenuItem Status;
    private javax.swing.JMenuItem TimeDate;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JMenu View;
    private javax.swing.JCheckBoxMenuItem WordWrap;
    private javax.swing.JMenuItem copyPopup;
    private javax.swing.JMenuItem cutPopUp;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem pastePopup;
    private javax.swing.JMenuItem viewHelp;
    // End of variables declaration                   
}
